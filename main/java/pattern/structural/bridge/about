Bridge Pattern
Subclass of Structural patterns. They help to define relationships between objects.

Bridge represents part-whole hierarchies by composing objects into tree structures. Individual objects and composition of objects are treated uniformly by the client in Bridge.
[1]

Decouple an abstraction from its implementation so that the two can vary independently
The implementation of bridge design pattern follows the notion to prefer Composition over inheritance.[2]

Example:
Shape <interface>
Color <interface>
RedColor implement Color
Triangle implements Shape   //<--implementation
    Color color;            //<--color interface is coupled with Shape implementation! Bridge pattern can fix this.
    Triangle(Color color){
        this.color = color;
    }



Sources:
[1] - https://www.ttmind.com/techpost/Design-Patterns-in-Object-Oriented-Programming-OOP
[2] - https://www.journaldev.com/1491/bridge-design-pattern-java
