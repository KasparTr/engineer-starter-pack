Adapter Pattern
Subclass of Structural patterns. They help to define relationships between objects.[1]

Adapter works between two independent and incompatible interfaces by converting the interface into another interface client expect.
It does so by wrapping an existing class with a new interface so that it becomes compatible with the client’s interface.

Examples:
Shape interface is proprietary solution. Circle and Rectangle both implement that and its working well with many dependencies in the project.
Geometric shape was added to the project as an open source dependecy. Its very similar to Shape but incompatible with our Drawing class.
OurDrawing client class can work only withShape  and not GeometricShape. This makesGeometricShape  incompatible with ourDrawing class. See the addShape() and getShapes() method of Drawing class:

Now, What Should We Do?
1) We change our code and we change/remove our Shape interface and start using the  GeometricShape interface. Or, we can convert the GeometricShape interface into our  Shape interface, if its open source and changes are minimal. But, it's not always possible because of other functionality and code dependency.
2) Continuing with what we are coding, should we not use the ready-to-use code/APIs?
No. Actually, all we need to have here is an adapter, which makes this ready-to-use code compatible with our code and the  Drawing in this example.

Now, when we are clear on why we need the adapter, let's take a closer look at what the adapter actually does. Before we start, below is the list of classes/objects used in the adapter pattern:

- Target — This defines the domain-specific interface that the client uses. This is the Shape interface in our example.
- Adapter — This adapts the interface from the adaptee to the target interface. This is the GeometricShape interface in our example
- Adaptee — This defines an existing interface that needs adapting. This is the GeometricShape interface in our example.
- Client — This collaborates with objects conforming to the Target interface. The Drawing class is the client in our example.
[2]

Sources:
[1] - https://www.ttmind.com/techpost/Design-Patterns-in-Object-Oriented-Programming-OOP
[2] - https://dzone.com/articles/adapter-design-pattern-in-java